# Generated by Neurodocker version 0.5.0
# Timestamp: 2019-09-16 14:38:55 UTC
#
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
#
#     https://github.com/kaczmarj/neurodocker

Bootstrap: docker
From: neurodebian:stretch-non-free

%post
export ND_ENTRYPOINT="/neurodocker/startup.sh"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    locales \
    unzip
apt-get clean
rm -rf /var/lib/apt/lists/*
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG="en_US.UTF-8"
chmod 777 /opt && chmod a+s /opt
mkdir -p /neurodocker
if [ ! -f "$ND_ENTRYPOINT" ]; then
  echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
  echo 'set -e' >> "$ND_ENTRYPOINT"
  echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT"
  echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
fi
chmod -R 777 /neurodocker && chmod a+s /neurodocker

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    gcc \
    g++ \
    graphviz \
    emacs-nox
apt-get clean
rm -rf /var/lib/apt/lists/*

export TMPDIR="$(mktemp -d)"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    libncurses5 \
    libxext6 \
    libxmu6 \
    libxpm-dev \
    libxt6
apt-get clean
rm -rf /var/lib/apt/lists/*
echo "Downloading MATLAB Compiler Runtime ..."
curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb
dpkg -i /tmp/toinstall.deb
rm /tmp/toinstall.deb
apt-get install -f
apt-get clean
rm -rf /var/lib/apt/lists/*
curl -fsSL --retry 5 -o "$TMPDIR/MCRInstaller.bin" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin
chmod +x "$TMPDIR/MCRInstaller.bin"
"$TMPDIR/MCRInstaller.bin" -silent -P installLocation="/opt/matlabmcr-2010a"
rm -rf "$TMPDIR"
unset TMPDIR
echo "Downloading standalone SPM ..."
curl -fsSL --retry 5 -o /tmp/spm12.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7219_R2010a.zip
unzip -q /tmp/spm12.zip -d /tmp
mkdir -p /opt/spm12-r7219
mv /tmp/spm12/* /opt/spm12-r7219/
chmod -R 777 /opt/spm12-r7219
rm -rf /tmp/*
/opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 quit
sed -i '$iexport SPMMCRCMD=\"/opt/spm12-r7219/run_spm12.sh /opt/matlabmcr-2010a/v713 script\"' $ND_ENTRYPOINT

echo "Downloading ANTs ..."
mkdir -p /opt/ants-2.3.1
curl -fsSL --retry 5 https://dl.dropbox.com/s/1xfhydsf4t4qoxg/ants-Linux-centos6_x86_64-v2.3.1.tar.gz \
| tar -xz -C /opt/ants-2.3.1 --strip-components 1

echo "Downloading Convert3D ..."
mkdir -p /opt/convert3d-1.0.0
curl -fsSL --retry 5 https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \
| tar -xz -C /opt/convert3d-1.0.0 --strip-components 1

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    dc \
    file \
    libfontconfig1 \
    libfreetype6 \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libgomp1 \
    libice6 \
    libxcursor1 \
    libxft2 \
    libxinerama1 \
    libxrandr2 \
    libxrender1 \
    libxt6 \
    wget
apt-get clean
rm -rf /var/lib/apt/lists/*
echo "Downloading FSL ..."
mkdir -p /opt/fsl-5.0.10
curl -fsSL --retry 5 https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-5.0.10-centos6_64.tar.gz \
| tar -xz -C /opt/fsl-5.0.10 --strip-components 1
sed -i '$iecho Some packages in this Docker container are non-free' $ND_ENTRYPOINT
sed -i '$iecho If you are considering commercial use of this container, please consult the relevant license:' $ND_ENTRYPOINT
sed -i '$iecho https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/Licence' $ND_ENTRYPOINT
sed -i '$isource $FSLDIR/etc/fslconf/fsl.sh' $ND_ENTRYPOINT
echo "Installing FSL conda environment ..."
bash /opt/fsl-5.0.10/etc/fslconf/fslpython_install.sh -f /opt/fsl-5.0.10


echo "Downloading PETPVC ..."
mkdir -p /opt/petpvc-1.2.2
curl -fsSL --retry 5 https://github.com/UCL/PETPVC/releases/download/v1.2.2/PETPVC-1.2.2-Linux.tar.gz \
| tar -xz -C /opt/petpvc-1.2.2 --strip-components 1

export TMPDIR="$(mktemp -d)"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    libncurses5 \
    libxext6 \
    libxmu6 \
    libxpm-dev \
    libxt6
apt-get clean
rm -rf /var/lib/apt/lists/*
echo "Downloading MATLAB Compiler Runtime ..."
curl -fsSL --retry 5 -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2018a/deployment_files/R2018a/installers/glnxa64/MCR_R2018a_glnxa64_installer.zip
unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp"
"$TMPDIR/mcrtmp/install" -destinationFolder /opt/matlabmcr-2018a -mode silent -agreeToLicense yes
rm -rf "$TMPDIR"
unset TMPDIR

export PATH="/opt/miniconda-latest/bin:$PATH"
echo "Downloading Miniconda installer ..."
conda_installer="/tmp/miniconda.sh"
curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash "$conda_installer" -b -p /opt/miniconda-latest
rm -f "$conda_installer"
conda update -yq -nbase conda
conda config --system --prepend channels conda-forge
conda config --system --set auto_update_conda false
conda config --system --set show_channel_urls true
sync && conda clean --all && sync
conda create -y -q --name neuro
conda install -y -q --name neuro \
    'python' \
    'pandas' \
    'matplotlib' \
    'scikit-learn' \
    'dipy' \
    'nipype'
sync && conda clean --all && sync
bash -c "source activate neuro
  pip install --no-cache-dir  \
      'nilearn' \
      'duecredit' \
      'XlsxWriter' \
      'xlrd' \
      'https://github.com/bilgelm/temporalimage/tarball/master' \
      'https://github.com/bilgelm/kineticmodel/tarball/master'"
rm -rf ~/.cache/pip/*
sync
sed -i '$isource activate neuro' $ND_ENTRYPOINT


mkdir /input && chmod 777 /input && chmod a+s /input

mkdir /output && chmod 777 /output && chmod a+s /output

mkdir /code && chmod 777 /code && chmod a+s /code

mkdir /templates && chmod 777 /templates && chmod a+s /templates

mkdir -p /archive/PET/CONVERTED && chmod 777 /archive/PET/CONVERTED && chmod a+s /archive/PET/CONVERTED

mkdir -p /archive/PROJECTS/MUSE_labels && chmod 777 /archive/PROJECTS/MUSE_labels && chmod a+s /archive/PROJECTS/MUSE_labels

rm -rf /opt/conda/pkgs/*

rm -rf /var/lib/apt/lists/*

echo '{
\n  "pkg_manager": "apt",
\n  "instructions": [
\n    [
\n      "base",
\n      "neurodebian:stretch-non-free"
\n    ],
\n    [
\n      "_header",
\n      {
\n        "version": "generic",
\n        "method": "custom"
\n      }
\n    ],
\n    [
\n      "install",
\n      [
\n        "gcc",
\n        "g++",
\n        "graphviz",
\n        "emacs-nox"
\n      ]
\n    ],
\n    [
\n      "spm12",
\n      {
\n        "version": "r7219"
\n      }
\n    ],
\n    [
\n      "ants",
\n      {
\n        "version": "2.3.1"
\n      }
\n    ],
\n    [
\n      "convert3d",
\n      {
\n        "version": "1.0.0"
\n      }
\n    ],
\n    [
\n      "fsl",
\n      {
\n        "version": "5.0.10"
\n      }
\n    ],
\n    [
\n      "petpvc",
\n      {
\n        "version": "1.2.2",
\n        "method": "binaries"
\n      }
\n    ],
\n    [
\n      "matlabmcr",
\n      {
\n        "version": "2018a"
\n      }
\n    ],
\n    [
\n      "miniconda",
\n      {
\n        "conda_install": [
\n          "python",
\n          "pandas",
\n          "matplotlib",
\n          "scikit-learn",
\n          "dipy",
\n          "nipype"
\n        ],
\n        "pip_install": [
\n          "nilearn",
\n          "duecredit",
\n          "XlsxWriter",
\n          "xlrd",
\n          "https://github.com/bilgelm/temporalimage/tarball/master",
\n          "https://github.com/bilgelm/kineticmodel/tarball/master"
\n        ],
\n        "create_env": "neuro",
\n        "activate": true
\n      }
\n    ],
\n    [
\n      "run",
\n      "mkdir /input && chmod 777 /input && chmod a+s /input"
\n    ],
\n    [
\n      "run",
\n      "mkdir /output && chmod 777 /output && chmod a+s /output"
\n    ],
\n    [
\n      "run",
\n      "mkdir /code && chmod 777 /code && chmod a+s /code"
\n    ],
\n    [
\n      "run",
\n      "mkdir /templates && chmod 777 /templates && chmod a+s /templates"
\n    ],
\n    [
\n      "run",
\n      "mkdir -p /archive/PET/CONVERTED && chmod 777 /archive/PET/CONVERTED && chmod a+s /archive/PET/CONVERTED"
\n    ],
\n    [
\n      "run",
\n      "mkdir -p /archive/PROJECTS/MUSE_labels && chmod 777 /archive/PROJECTS/MUSE_labels && chmod a+s /archive/PROJECTS/MUSE_labels"
\n    ],
\n    [
\n      "run",
\n      "rm -rf /opt/conda/pkgs/*"
\n    ],
\n    [
\n      "run",
\n      "rm -rf /var/lib/apt/lists/*"
\n    ]
\n  ]
\n}' > /neurodocker/neurodocker_specs.json

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export ND_ENTRYPOINT="/neurodocker/startup.sh"
export FORCE_SPMMCR="1"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2010a/v713/runtime/glnxa64:/opt/matlabmcr-2010a/v713/bin/glnxa64:/opt/matlabmcr-2010a/v713/sys/os/glnxa64:/opt/matlabmcr-2010a/v713/extern/bin/glnxa64"
export MATLABCMD="/opt/matlabmcr-2010a/v713/toolbox/matlab"
export ANTSPATH="/opt/ants-2.3.1"
export PATH="/opt/ants-2.3.1:$PATH"
export C3DPATH="/opt/convert3d-1.0.0"
export PATH="/opt/convert3d-1.0.0/bin:$PATH"
export FSLDIR="/opt/fsl-5.0.10"
export PATH="/opt/fsl-5.0.10/bin:$PATH"
export PATH="/opt/petpvc-1.2.2/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlabmcr-2018a/v94/runtime/glnxa64:/opt/matlabmcr-2018a/v94/bin/glnxa64:/opt/matlabmcr-2018a/v94/sys/os/glnxa64:/opt/matlabmcr-2018a/v94/extern/bin/glnxa64"
export MATLABCMD="/opt/matlabmcr-2018a/v94/toolbox/matlab"
export CONDA_DIR="/opt/miniconda-latest"
export PATH="/opt/miniconda-latest/bin:$PATH"

%runscript
/neurodocker/startup.sh "$@"
